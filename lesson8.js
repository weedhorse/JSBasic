// 2. Не выполняя кода, ответить, что выведет браузер и почему:
//
//    if (!("a" in window)) {
//         var a = 1;
//     }
//     alert(a);
//
//     Браузер выведет undefined, т.к. код сначала собирает все переменные и выделяет им память, а затем выполняет код.
//     Таким образом, при проверке условия 'a' уже есть в глобальной видимости (window), и внутренний блок условия не выполнится.
//
//
//    var b = function a(x) {
//         x && a(--x);
//     };
//     alert(a);
//
//      Будет ошибка, т.к. function definition expression не подразумевает использование наименования функции во внешней
//      области - только для использования внутри самой функции (рекурсия)
//
//
//     function a(x) {
//         return x * 2;
//     }
//     var a;
//     alert(a);
//
//      Браузер выведет код функции, т.к. ее не вызвали
//
//
//     function b(x, y, a) {
//         arguments[2] = 10;
//         alert(a);
//     }
//     b(1, 2, 3);
//
//      Браузер выведет 10, т.к. этот аргумент был заменен с помощью arguments
//
//
//     function a() {
//         alert(this);
//     }
//     a.call(null);
//
//    Браузер выведет window, т.к. если передать undefined или null в .call или .apply, то движок JS сам подставит туда window.
//    Если указать "use strict"; то будет работать интуитивно и логично — выведет null
